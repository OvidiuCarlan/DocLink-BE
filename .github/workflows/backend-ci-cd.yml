name: DocLink Build Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Build each service individually with detailed logging
  build-service:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [UserService, PostService, AppointmentService, api-gateway]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Check service directory and build files
        run: |
          echo "Contents of ${{ matrix.service }} directory:"
          ls -la ${{ matrix.service }} || echo "Directory not found"
          
          if [ -f "${{ matrix.service }}/build.gradle" ]; then
            echo "Found build.gradle:"
            cat "${{ matrix.service }}/build.gradle"
          elif [ -f "${{ matrix.service }}/build.gradle.kts" ]; then
            echo "Found build.gradle.kts:"
            cat "${{ matrix.service }}/build.gradle.kts"
          else
            echo "No build.gradle file found"
          fi
          
          if [ -f "${{ matrix.service }}/settings.gradle" ]; then
            echo "Found settings.gradle:"
            cat "${{ matrix.service }}/settings.gradle"
          elif [ -f "${{ matrix.service }}/settings.gradle.kts" ]; then
            echo "Found settings.gradle.kts:"
            cat "${{ matrix.service }}/settings.gradle.kts"
          fi
          
          if [ -f "${{ matrix.service }}/gradlew" ]; then
            echo "Found Gradle wrapper"
          else
            echo "No Gradle wrapper found"
          fi

      # Try to build with Gradle but continue on error
      - name: Build service
        continue-on-error: true
        run: |
          if [ -f "${{ matrix.service }}/gradlew" ]; then
            cd ${{ matrix.service }}
            chmod +x ./gradlew
            echo "Running gradle build for ${{ matrix.service }}"
            ./gradlew clean assemble --info --stacktrace
          else
            echo "Gradle wrapper not found - using system Gradle"
            sudo apt-get update && sudo apt-get install -y gradle
            cd ${{ matrix.service }}
            echo "Running gradle build for ${{ matrix.service }}"
            gradle clean assemble --info --stacktrace 
          fi

      # Check for compiled output
      - name: Check for build output
        run: |
          echo "Checking for build output in ${{ matrix.service }}/build directory:"
          if [ -d "${{ matrix.service }}/build" ]; then
            ls -la "${{ matrix.service }}/build" 
          
            if [ -d "${{ matrix.service }}/build/libs" ]; then
              echo "Contents of build/libs:"
              ls -la "${{ matrix.service }}/build/libs"
            fi
          else
            echo "No build directory found"
          fi