name: DocLink CI/CD Pipeline with Security Scanning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  actions: read
  checks: write
  security-events: write

jobs:
  # Security scanning job
  security-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ UserService, PostService, AppointmentService, api-gateway ]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      # Install Snyk CLI
      - name: Install Snyk CLI
        run: |
          curl -Lo ./snyk "https://github.com/snyk/cli/releases/latest/download/snyk-linux"
          chmod +x ./snyk
          sudo mv ./snyk /usr/local/bin/

      # Authenticate with Snyk
      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Scan dependencies for vulnerabilities
      - name: Run Snyk dependency scan for ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          if [ -f "build.gradle" ]; then
            echo "Scanning Gradle dependencies for ${{ matrix.service }}"
            snyk test --org=${{ secrets.SNYK_ORG_ID }} --severity-threshold=medium --json > snyk-deps-${{ matrix.service }}.json || true
            snyk test --org=${{ secrets.SNYK_ORG_ID }} --severity-threshold=medium
          else
            echo "No build.gradle found for ${{ matrix.service }}"
            exit 1
          fi
        continue-on-error: true

      # Scan code for security issues
      - name: Run Snyk code scan for ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          echo "Scanning code for security issues in ${{ matrix.service }}"
          snyk code test --org=${{ secrets.SNYK_ORG_ID }} --severity-threshold=medium --json > snyk-code-${{ matrix.service }}.json || true
          snyk code test --org=${{ secrets.SNYK_ORG_ID }} --severity-threshold=medium
        continue-on-error: true

      # Store security scan results as artifacts
      - name: Upload Snyk scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-results-${{ matrix.service }}
          path: |
            ${{ matrix.service }}/snyk-*.json
          retention-days: 30

  test:
    needs: security-scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ UserService, PostService, AppointmentService, api-gateway ]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      # Run tests with Gradle
      - name: Run tests for ${{ matrix.service }}
        run: |
          if [ -f "${{ matrix.service }}/gradlew" ]; then
            cd ${{ matrix.service }}
            chmod +x ./gradlew
            ./gradlew clean test --info
          else
            echo "Gradle wrapper not found - using system Gradle"
            sudo apt-get update && sudo apt-get install -y gradle
            cd ${{ matrix.service }}
            gradle clean test --info
          fi

      # Publish test results
      - name: Publish Test Results for ${{ matrix.service }}
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results - ${{ matrix.service }}
          path: ${{ matrix.service }}/build/test-results/test/*.xml
          reporter: java-junit
          fail-on-error: false

  # Build and create Docker images for each service
  build-and-push:
    needs: [security-scan, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [UserService, PostService, AppointmentService, api-gateway]
        include:
          - service: UserService
            lowercase: userservice
          - service: PostService
            lowercase: postservice
          - service: AppointmentService
            lowercase: appointmentservice
          - service: api-gateway
            lowercase: api-gateway
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      # Build with Gradle
      - name: Build service
        run: |
          if [ -f "${{ matrix.service }}/gradlew" ]; then
            cd ${{ matrix.service }}
            chmod +x ./gradlew
            ./gradlew clean assemble -x test
          else
            echo "Gradle wrapper not found - using system Gradle"
            sudo apt-get update && sudo apt-get install -y gradle
            cd ${{ matrix.service }}
            gradle clean assemble -x test
          fi

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry (only on main branch)
      - name: Login to GitHub Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Convert repository owner to lowercase
      - name: Set lowercase repository owner
        run: |
          echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # Build Docker image locally first
      - name: Build Docker image
        run: |
          cd ${{ matrix.service }}
          if [ -f "Dockerfile" ]; then
            echo "Using existing Dockerfile"
          else
            echo "Creating simple Dockerfile"
            echo "FROM openjdk:17-slim" > Dockerfile
            echo "WORKDIR /app" >> Dockerfile
            echo "COPY build/libs/*.jar app.jar" >> Dockerfile
            echo "ENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]" >> Dockerfile
          fi
          
          # Build the image locally with lowercase name
          docker build -t doclink-${{ matrix.lowercase }}:latest .

      # Install Snyk CLI for Docker scanning
      - name: Install Snyk CLI
        run: |
          curl -Lo ./snyk "https://github.com/snyk/cli/releases/latest/download/snyk-linux"
          chmod +x ./snyk
          sudo mv ./snyk /usr/local/bin/

      # Scan Docker image with Snyk
      - name: Run Snyk container scan
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk container test doclink-${{ matrix.lowercase }}:latest --org=${{ secrets.SNYK_ORG_ID }} --severity-threshold=medium --json > snyk-container-${{ matrix.service }}.json || true
          snyk container test doclink-${{ matrix.lowercase }}:latest --org=${{ secrets.SNYK_ORG_ID }} --severity-threshold=medium
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Monitor Docker image with Snyk
      - name: Monitor Docker image with Snyk
        if: github.ref == 'refs/heads/main'
        run: |
          snyk container monitor doclink-${{ matrix.lowercase }}:latest --org=${{ secrets.SNYK_ORG_ID }} --project-name="doclink-${{ matrix.lowercase }}-container"
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Store container scan results
      - name: Upload Snyk container scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-container-results-${{ matrix.service }}
          path: snyk-container-${{ matrix.service }}.json
          retention-days: 30

      # Push Docker image (only on main branch)
      - name: Push Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          # Tag with GHCR and push
          docker tag doclink-${{ matrix.lowercase }}:latest ghcr.io/${{ env.REPO_OWNER }}/doclink-${{ matrix.lowercase }}:latest
          docker tag doclink-${{ matrix.lowercase }}:latest ghcr.io/${{ env.REPO_OWNER }}/doclink-${{ matrix.lowercase }}:${{ github.sha }}
          
          # Push to GitHub Container Registry
          docker push ghcr.io/${{ env.REPO_OWNER }}/doclink-${{ matrix.lowercase }}:latest
          docker push ghcr.io/${{ env.REPO_OWNER }}/doclink-${{ matrix.lowercase }}:${{ github.sha }}

  # Security summary job
  security-summary:
    needs: [security-scan, build-and-push]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download all Snyk results
        uses: actions/download-artifact@v4
        with:
          path: snyk-results
          pattern: snyk-*
          merge-multiple: true

      - name: Generate Security Summary
        run: |
          echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Services Scanned" >> $GITHUB_STEP_SUMMARY
          echo "- UserService" >> $GITHUB_STEP_SUMMARY
          echo "- PostService" >> $GITHUB_STEP_SUMMARY
          echo "- AppointmentService" >> $GITHUB_STEP_SUMMARY
          echo "- API Gateway" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Scan Types Performed" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 **Dependency Vulnerability Scanning**: Checked all Gradle dependencies for known vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ **Static Code Analysis**: Scanned source code for security issues and code smells" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 **Container Image Scanning**: Analyzed Docker images for vulnerabilities in base images and layers" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📊 Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "Detailed results have been uploaded as artifacts and are available in the Snyk dashboard." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review any security findings in the Snyk dashboard" >> $GITHUB_STEP_SUMMARY
          echo "2. Address high and critical severity issues" >> $GITHUB_STEP_SUMMARY
          echo "3. Consider implementing Snyk fix suggestions" >> $GITHUB_STEP_SUMMARY
          echo "4. Monitor ongoing security status through Snyk monitoring" >> $GITHUB_STEP_SUMMARY

  # Deploy services
  deploy:
    needs: [build-and-push, security-summary]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase repository owner
        run: |
          echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Create deployment script
        run: |
          cat << 'EOF' > deploy.sh
          #!/bin/bash
          set -e
          
          echo "Setting up Docker network..."
          docker network create doclink-network || true
          
          echo "Starting MySQL..."
          docker stop doclink-mysql || true
          docker rm doclink-mysql || true
          docker run -d \
            -e MYSQL_DATABASE=dbi481968 \
            -e MYSQL_USER=dbi481968 \
            -e MYSQL_PASSWORD=password \
            -e MYSQL_ROOT_PASSWORD=root_password \
            -p 3306:3306 \
            --network doclink-network \
            --name doclink-mysql \
            mysql:8.0
          
          echo "Starting MongoDB..."
          docker stop mongodb || true
          docker rm mongodb || true
          docker run -d \
            -p 27017:27017 \
            --network doclink-network \
            --name mongodb \
            mongo:latest
          
          echo "Waiting for databases to be ready..."
          sleep 30
          
          echo "Pulling and starting services..."
          OWNER="${{ env.REPO_OWNER }}"
          SHA="${{ github.sha }}"
          
          # Pull and run User Service
          docker pull ghcr.io/$OWNER/doclink-userservice:$SHA
          docker stop doclink-user-service || true
          docker rm doclink-user-service || true
          docker run -d \
            -e SPRING_DATASOURCE_URL=jdbc:mysql://doclink-mysql:3306/dbi481968 \
            -e SPRING_DATASOURCE_USERNAME=dbi481968 \
            -e SPRING_DATASOURCE_PASSWORD=password \
            -p 8080:8080 \
            --network doclink-network \
            --name doclink-user-service \
            ghcr.io/$OWNER/doclink-userservice:$SHA
          
          # Pull and run Post Service
          docker pull ghcr.io/$OWNER/doclink-postservice:$SHA
          docker stop doclink-post-service || true
          docker rm doclink-post-service || true
          docker run -d \
            -e SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/postservice \
            -p 8081:8081 \
            --network doclink-network \
            --name doclink-post-service \
            ghcr.io/$OWNER/doclink-postservice:$SHA
          
          # Pull and run Appointment Service
          docker pull ghcr.io/$OWNER/doclink-appointmentservice:$SHA
          docker stop doclink-appointment-service || true
          docker rm doclink-appointment-service || true
          docker run -d \
            -e SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/appointment-db \
            -p 8082:8082 \
            --network doclink-network \
            --name doclink-appointment-service \
            ghcr.io/$OWNER/doclink-appointmentservice:$SHA
          
          # Pull and run API Gateway
          docker pull ghcr.io/$OWNER/doclink-api-gateway:$SHA
          docker stop doclink-api-gateway || true
          docker rm doclink-api-gateway || true
          docker run -d \
            -e USER_SERVICE_URL=http://doclink-user-service:8080 \
            -e POST_SERVICE_URL=http://doclink-post-service:8081 \
            -e APPOINTMENT_SERVICE_URL=http://doclink-appointment-service:8082 \
            -p 9000:9000 \
            --network doclink-network \
            --name doclink-api-gateway \
            ghcr.io/$OWNER/doclink-api-gateway:$SHA
          
          echo "Deployment completed. Checking running containers:"
          docker ps
          EOF
          
          chmod +x deploy.sh

      - name: Run deployment
        run: ./deploy.sh