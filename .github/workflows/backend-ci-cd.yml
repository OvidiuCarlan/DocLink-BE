name: DocLink CI/CD Pipeline with Security Scanning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  actions: read
  checks: write
  security-events: write

jobs:
  # Security scanning job
  security-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ UserService, PostService, AppointmentService, api-gateway ]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      # Install Snyk CLI
      - name: Install Snyk CLI
        run: |
          curl -Lo ./snyk "https://github.com/snyk/cli/releases/latest/download/snyk-linux"
          chmod +x ./snyk
          sudo mv ./snyk /usr/local/bin/

      # Authenticate with Snyk
      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Scan dependencies for vulnerabilities
      - name: Run Snyk dependency scan for ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          if [ -f "build.gradle" ]; then
            echo "Scanning Gradle dependencies for ${{ matrix.service }}"
            snyk test --org=${{ secrets.SNYK_ORG_ID }} --severity-threshold=medium --json > snyk-deps-${{ matrix.service }}.json || true
            snyk test --org=${{ secrets.SNYK_ORG_ID }} --severity-threshold=medium
          else
            echo "No build.gradle found for ${{ matrix.service }}"
            exit 1
          fi
        continue-on-error: true

      # Scan code for security issues
      - name: Run Snyk code scan for ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          echo "Scanning code for security issues in ${{ matrix.service }}"
          snyk code test --org=${{ secrets.SNYK_ORG_ID }} --severity-threshold=medium --json > snyk-code-${{ matrix.service }}.json || true
          snyk code test --org=${{ secrets.SNYK_ORG_ID }} --severity-threshold=medium
        continue-on-error: true

      # Store security scan results as artifacts
      - name: Upload Snyk scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-results-${{ matrix.service }}
          path: |
            ${{ matrix.service }}/snyk-*.json
          retention-days: 30

  test:
    needs: security-scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ UserService, PostService, AppointmentService, api-gateway ]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      # Run tests with Gradle
      - name: Run tests for ${{ matrix.service }}
        run: |
          if [ -f "${{ matrix.service }}/gradlew" ]; then
            cd ${{ matrix.service }}
            chmod +x ./gradlew
            ./gradlew clean test --info
          else
            echo "Gradle wrapper not found - using system Gradle"
            sudo apt-get update && sudo apt-get install -y gradle
            cd ${{ matrix.service }}
            gradle clean test --info
          fi

      # Publish test results
      - name: Publish Test Results for ${{ matrix.service }}
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results - ${{ matrix.service }}
          path: ${{ matrix.service }}/build/test-results/test/*.xml
          reporter: java-junit
          fail-on-error: false

  build-and-push:
    needs: [ security-scan, test ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [ UserService, PostService, AppointmentService, api-gateway ]
        include:
          - service: UserService
            lowercase: userservice
          - service: PostService
            lowercase: postservice
          - service: AppointmentService
            lowercase: appointmentservice
          - service: api-gateway
            lowercase: api-gateway
      fail-fast: false

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository_owner }}/doclink-${{ matrix.lowercase }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Build service ${{ matrix.service }}
        run: |
          if [ -f "${{ matrix.service }}/gradlew" ]; then
            cd ${{ matrix.service }}
            chmod +x ./gradlew
            ./gradlew clean assemble -x test
          else
            echo "Gradle wrapper not found - using system Gradle"
            sudo apt-get update && sudo apt-get install -y gradle
            cd ${{ matrix.service }}
            gradle clean assemble -x test
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set lowercase image name
        run: echo "LOWERCASE_IMAGE_NAME=$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.LOWERCASE_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}


    # Deploy services
  deploy:
    needs: [ build-and-push ]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase repository owner
        run: |
          echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Create deployment script
        run: |
          cat << 'EOF' > deploy.sh
          #!/bin/bash
          set -e

          echo "Setting up Docker network..."
          docker network create doclink-network || true

          echo "Starting MySQL..."
          docker stop doclink-mysql || true
          docker rm doclink-mysql || true
          docker run -d \
            -e MYSQL_DATABASE=dbi481968 \
            -e MYSQL_USER=dbi481968 \
            -e MYSQL_PASSWORD=password \
            -e MYSQL_ROOT_PASSWORD=root_password \
            -p 3306:3306 \
            --network doclink-network \
            --name doclink-mysql \
            mysql:8.0

          echo "Starting MongoDB..."
          docker stop mongodb || true
          docker rm mongodb || true
          docker run -d \
            -p 27017:27017 \
            --network doclink-network \
            --name mongodb \
            mongo:latest

          echo "Starting RabbitMQ..."
          docker stop doclink-rabbitmq || true
          docker rm doclink-rabbitmq || true
          docker run -d \
            -e RABBITMQ_DEFAULT_USER=guest \
            -e RABBITMQ_DEFAULT_PASSWORD=guest \
            -p 5672:5672 \
            -p 15672:15672 \
            --network doclink-network \
            --name doclink-rabbitmq \
            rabbitmq:3-management

          echo "Waiting for databases to be ready..."
          sleep 30

          echo "Pulling and starting services..."
          OWNER="${{ env.REPO_OWNER }}"

          # Use latest tag for main branch deployments
          TAG="latest"

          # Pull and run User Service
          docker pull ghcr.io/$OWNER/doclink-userservice:$TAG
          docker stop doclink-user-service || true
          docker rm doclink-user-service || true
          docker run -d \
            -e SPRING_DATASOURCE_URL=jdbc:mysql://doclink-mysql:3306/dbi481968 \
            -e SPRING_DATASOURCE_USERNAME=dbi481968 \
            -e SPRING_DATASOURCE_PASSWORD=password \
            -e RABBITMQ_HOST=doclink-rabbitmq \
            -p 8080:8080 \
            --network doclink-network \
            --name doclink-user-service \
            ghcr.io/$OWNER/doclink-userservice:$TAG

          # Pull and run Post Service
          docker pull ghcr.io/$OWNER/doclink-postservice:$TAG
          docker stop doclink-post-service || true
          docker rm doclink-post-service || true
          docker run -d \
            -e SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/postservice \
            -e RABBITMQ_HOST=doclink-rabbitmq \
            -p 8081:8081 \
            --network doclink-network \
            --name doclink-post-service \
            ghcr.io/$OWNER/doclink-postservice:$TAG

          # Pull and run Appointment Service
          docker pull ghcr.io/$OWNER/doclink-appointmentservice:$TAG
          docker stop doclink-appointment-service || true
          docker rm doclink-appointment-service || true
          docker run -d \
            -e SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/appointment-db \
            -e RABBITMQ_HOST=doclink-rabbitmq \
            -p 8082:8082 \
            --network doclink-network \
            --name doclink-appointment-service \
            ghcr.io/$OWNER/doclink-appointmentservice:$TAG

          # Pull and run API Gateway
          docker pull ghcr.io/$OWNER/doclink-api-gateway:$TAG
          docker stop doclink-api-gateway || true
          docker rm doclink-api-gateway || true
          docker run -d \
            -e USER_SERVICE_URL=http://doclink-user-service:8080 \
            -e POST_SERVICE_URL=http://doclink-post-service:8081 \
            -e APPOINTMENT_SERVICE_URL=http://doclink-appointment-service:8082 \
            -p 9000:9000 \
            --network doclink-network \
            --name doclink-api-gateway \
            ghcr.io/$OWNER/doclink-api-gateway:$TAG

          echo "Deployment completed. Checking running containers:"
          docker ps
          EOF

          chmod +x deploy.sh

      - name: Run deployment
        run: ./deploy.sh